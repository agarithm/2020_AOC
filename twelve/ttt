#!/usr/bin/php
<?php

namespace Agarithm;

require_once(dirname(dirname(__FILE__))."/Agarithm/Strings.php");
require_once(dirname(dirname(__FILE__))."/Agarithm/Utils.php");
require_once(dirname(dirname(__FILE__))."/Agarithm/Scraper.php");
require_once(dirname(dirname(__FILE__))."/Agarithm/Memo.php");

$raw = FILE(dirname(__FILE__)."/dirs");
$raw = array_map("trim",$raw);

function between($val, $min, $max) {
	GLOBAL $dbg;
	settype($val,'integer');
	return ($val >= $min && $val <= $max);
}

class ship {
	public $x = 0;
	public $y = 0;
	public $wx = 10;
	public $wy = 1;
	public $heading = 90;


	public function move($line){
		$cmd = $line[0];
		$val = (int)Strings::After($line,$cmd);
		switch($cmd){
		case 'N':
			$this->y += $val;
			break;
		case 'S':
			$this->y -= $val;
			break;
		case 'E':
			$this->x += $val;
			break;
		case 'W':
			$this->x -= $val;
			break;
		case 'R':
			$this->heading += $val;
			$this->heading %= 360;
			break;
		case 'L':
			$this->heading -= $val;
			$this->heading += $this->heading < 0 ? 360 : 0;
			break;
		case 'F':
			switch($this->heading) {
			case '0':
				$this->move("N$val");
				break;
			case '90':
				$this->move("E$val");
				break;
			case '180':
				$this->move("S$val");
				break;
			case '270':
				$this->move("W$val");
				break;
			default:
				FATAL("Poop -> Heading is not on simple coords ".$this->heading);
			}
			break;
		}
	}

	public function way($line){
		$cmd = $line[0];
		$val = (int)Strings::After($line,$cmd);
		switch($cmd){
		case 'N':
			$this->wy += $val;
			break;
		case 'S':
			$this->wy -= $val;
			break;
		case 'E':
			$this->wx += $val;
			break;
		case 'W':
			$this->wx -= $val;
			break;
		case 'R':
			$oldX = $this->wx;
			$oldY = $this->wy;
			switch($val) {
			case '0':
			case '360':
				//do nothing
				return;
			case '90':
				$rad = M_PI/2;
				break;
			case '180':
				$rad = M_PI;
				break;
			case '270':
				$rad = 3*M_PI/2;
				break;
			default:
				FATAL("Poop -> Heading is not on simple coords ".$val);
			}

			//Rotate around Origin: https://gist.github.com/LyleScott/e36e08bfb23b1f87af68c9051f985302
			$this->wx = $oldX * cos($rad) + $oldY * sin($rad);
			$this->wy = -1 * $oldX * sin($rad) + $oldY * cos($rad);
			break;
		case 'L':
			$this->way("R".(360-$val));
			break;
		case 'F':
			$this->x += $this->wx * $val;
			$this->y += $this->wy * $val;
			break;
		}
	}

	public function Manhattan(){
		return abs($this->x)+abs($this->y);
	}
}

$ship = new ship();
foreach($raw as $line){
	$ship->move($line);
}

INFO("Manhattan Distance Moved = ".$ship->Manhattan());



$ship = new ship();
foreach($raw as $line){
	$ship->way($line);
}

INFO("Manhattan Distance Waypointed = ".$ship->Manhattan());
